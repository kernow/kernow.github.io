<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Kernow Soul]]></title>
  <link href="http://kernowsoul.com/blog/tags/rails/atom.xml" rel="self"/>
  <link href="http://kernowsoul.com/"/>
  <updated>2014-03-21T14:54:07+00:00</updated>
  <id>http://kernowsoul.com/</id>
  <author>
    <name><![CDATA[Jamie Dyer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shoulda macro should_render_a_form_to]]></title>
    <link href="http://kernowsoul.com/blog/2009/10/07/shoulda-macro-shouldrenderaformto/"/>
    <updated>2009-10-07T16:49:00+01:00</updated>
    <id>http://kernowsoul.com/blog/2009/10/07/shoulda-macro-shouldrenderaformto</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been writing a fair number of functional tests recently, one thing that kept cropping up was the need to check if a form had been rendered and that it is going to perform a particular action. Shoulda has a should_render_a_form macro, unfortunately it&rsquo;s been depreciated and doesn&rsquo;t do anything other than check a form element has been rendered in the view.</p>

<p>I decided to come up with my own macro that checks the specifics of a form element, enter should_render_a_form_to. This takes three arguments, a description, an options hash and a block that contains the expected url. You can use the macro as follows&hellip;</p>

<p>Check there is a form posting to the new_user_post_path:
<code>ruby
should_render_a_form_to("create a new post", {:method =&gt; "post"}) { new_user_post_path(@user.id) }
</code></p>

<p>Check there is a form putting to the user_post_path and that the form has the id of &lsquo;post_edit_form&rsquo;:
<code>ruby
should_render_a_form_to("update a post", {:method =&gt; "put", :id =&gt; "post_edit_form"}) { user_post_path( :user_id =&gt; @user.id, :id =&gt; 1) }
</code></p>

<p>The macro code is available on <a href="http://github.com/kernow/shoulda/tree/form_macro">github</a> with test coverage. If you just want to cut and paste into your own macro&rsquo;s file:</p>

<p>``` ruby
def should_render_a_form_to(description, options = {}, &amp;block)
  should &ldquo;render a form to #{description}&rdquo; do</p>

<pre><code>expected_url  = instance_eval(&amp;block)
form_method   = case options[:method]
  when "post", "put", "delete" : "post"
  else "get"
  end
assert_select "form[action=?][method=?]",
              expected_url,
              form_method,
              true,
              "The template doesn't contain a &lt;form&gt; element with the action #{expected_url}" do |elms|

  if options[:id]
    elms.each do |elm|
      assert_select elm,
                    "##{options[:id]}",
                    true,
                    "The template doesn't contain a &lt;form&gt; element with the id #{options[:id]}"
    end
  end

  unless %w{get post}.include? options[:method]
    assert_select "input[name=_method][value=?]",
                  options[:method],
                  true,
                  "The template doesn't contain a &lt;form&gt; for #{expected_url} using the method #{options[:method]}"
  end
end
</code></pre>

<p>  end
end
```</p>

<p>The macro checks both the forms action attribute as well as the hidden input rails uses to specify the method where necessary. I&rsquo;ve also been playing with creating a macro to check for a form with specific fields such as should_render_a_form_with_fields. This is proving to be slightly more difficult than I originally anticipated and defining a nice interface to the method has been rather tricky.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vlad the Deployer Hoptoad Integration]]></title>
    <link href="http://kernowsoul.com/blog/2009/09/04/vlad-the-deployer-hoptoad-integration/"/>
    <updated>2009-09-04T11:46:00+01:00</updated>
    <id>http://kernowsoul.com/blog/2009/09/04/vlad-the-deployer-hoptoad-integration</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just had to setup <a href="http://hoptoadapp.com">Hoptoad</a> for one of our apps that uses <a href="http://rubyhitsquad.com/Vlad_the_Deployer.html">Vlad</a> for deployment, the integration isn&rsquo;t quite as easy as with <a href="http://www.capify.org">Capistrano</a>. I couldn&rsquo;t find much information on how to integrate the two so I thought I&rsquo;d share my solution.</p>

<p>The original Hoptoad task for use with Capistrano needed a little modification.</p>

<p><code>ruby
task :notify_hoptoad do
  rails_env = fetch(:rails_env, "production")
  local_user = ENV['USER'] || ENV['USERNAME']
  notify_command = "rake hoptoad:deploy TO=#{rails_env} REVISION=#{current_revision} REPO=#{repository} USER=#{local_user}"
  puts "Notifying Hoptoad of Deploy (#{notify_command})"
  `#{notify_command}`
  puts "Hoptoad Notification Complete."
end
</code></p>

<p>fetch is a Capistrano method so needed to be removed, we can use the <a href="http://hitsquad.rubyforge.org/vlad/doco/getting_started_txt.html">Vlad environment pattern</a> for this. I also wanted to use the git information for the user instead of the system user, finally as far as I can tell the git commit SHA being deployed is not available in Vlad.</p>

<p>In the Vlad deployment script I added a Hoptoad task to replace the default Capistrano task provided by Hoptoad.</p>

<p><code>ruby
task :notify_hoptoad =&gt; [:git_user, :git_revision] do
  notify_command = "rake hoptoad:deploy TO=#{rails_env} REVISION=#{current_sha} REPO=#{repository} USER='#{current_user}'"
  puts "Notifying Hoptoad of Deploy (#{notify_command})"
  `#{notify_command}`
  puts "Hoptoad Notification Complete."
end
</code></p>

<p>Then added it as a dependency for the deploy task</p>

<p><code>ruby
task :deploy =&gt; [:update, :migrate, :start_app, :notify_hoptoad]
</code></p>

<p>There are a couple of helper tasks I&rsquo;ve added to get the git user and the SHA of the commit being deployed</p>

<p>``` ruby
remote_task :git_revision do
  set :current_sha, run(&ldquo;cd #{File.join(scm_path, &lsquo;repo&rsquo;)}; git rev-parse origin/master&rdquo;).strip
end</p>

<p>task :git_user do
  set :current_user, <code>git config --get user.name</code>.strip
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For the love of table football, why I stayed up for 48 hours]]></title>
    <link href="http://kernowsoul.com/blog/2009/08/24/for-the-love-of-table-football-why-i-stayed-up-for-48-hours/"/>
    <updated>2009-08-24T01:05:00+01:00</updated>
    <id>http://kernowsoul.com/blog/2009/08/24/for-the-love-of-table-football-why-i-stayed-up-for-48-hours</id>
    <content type="html"><![CDATA[<p><strong>Update:</strong> wuzlr.com is no longer a live site</p>

<p>What a weekend! it all started on Friday night, a feverish last minute planning session began on how we would implement "Wuzlr". We'd bounced around some ideas earlier in the week and had a pretty good idea of what we wanted, whittling that down into a set of features we could implement in 48 hours was no easy task, there was so many good ideas and we didn't have time to implement them all. At 1am it all began...</p>




<h3>The Pitch</h3>




<p>If your office is anything like ours things get pretty serious whenever a game of table football breaks out (especially when <a href="http://twitter.com/theozaurus">@theozaurus</a> is playing). We've wanted a way to track who's the best in the office for quite some time, finally we have just the thing, and so do you. Wuzlr is a table football league tracking application that lets you see performance over time with all sorts of fun and interesting facts and figures displayed.</p>




<p>Wuzlr (or wuzler if you use the correct non web 2.0 spelling) is the Austrian word for table football and just so happened to be the first domain we came across that's still available. We also liked the hat tip to the 'e' dropping crowd, no, not you party people, I'm talking about flickr and the like.</p>




<object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/gGYnFlC7i7E&hl=en&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/gGYnFlC7i7E&hl=en&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object>




<h3>Application Features</h3>




<ul>
  <li>Create leagues and record all your games,
<s>Check out the <a href="#">Jiva office league</a></s></li>

  <li>Compare yourself to other players,
Me Vs. Theo <br /><img src="http://kernowsoul.com/images/uploaded/wuzlr-compare.jpg" style="margin-top: 20px;margin-bottom: 20px;" /></li>

  <li>View your nemesis, best team mate, worst team mate and more, <s><a href="#">my player page</a></s></li>

  <li>League standings, games played per day, table bias, most dedicated players (who's put the most time in) <br /><img src="http://kernowsoul.com/images/uploaded/wuzlr-graphs.jpg" style="margin-top: 20px;margin-bottom: 20px;" /></li>
</ul>




<h3>Our Team</h3>




<ul>
  <li>Jamie Dyer <a href="http://twitter.com/kernowsoul">@kernowsoul</a> Developer for <a href="http://jivatechnology.com/">Jiva</a></li>
  <li>Theo Coushion <a href="http://twitter.com/theozaurus">@theozaurus</a> Developer for <a href="http://jivatechnology.com/">Jiva</a></li>
  <li>Peter Coles <a href="http://twitter.com/fatelvis">@fatelvis</a> Designer for <a href="http://www.existem.com/">Existem</a></li>
</ul>




<p>Yes we know the site looks terrible in IE, who uses IE anyway?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRYing up multiple user contexts with shoulda macros]]></title>
    <link href="http://kernowsoul.com/blog/2009/05/22/drying-up-multiple-user-contexts-with-shoulda-macros/"/>
    <updated>2009-05-22T00:14:00+01:00</updated>
    <id>http://kernowsoul.com/blog/2009/05/22/drying-up-multiple-user-contexts-with-shoulda-macros</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;ve been writing tests for a legacy Rails application I inherited recently. The application has several user roles, each role having varying permissions. To deal with this nicely I setup <a href="http://thoughtbot.com/projects/shoulda">shoulda</a> macro&rsquo;s to create contexts for each of the user roles, public user, standard user, admin user etc. then in my tests I could write&hellip;</p>

<p>``` ruby
public_context do</p>

<p>  context &ldquo;on GET to :index&rdquo; do</p>

<pre><code>setup do
  get :index
end

should_redirect_to("root url") { root_url }
</code></pre>

<p>  end
end</p>

<p>signed_in_user_context do</p>

<p>  context &ldquo;on GET to :index&rdquo; do</p>

<pre><code>setup do
  get :index
end

should_redirect_to("user url") { user_url }
</code></pre>

<p>  end
end
```</p>

<p>This is pretty standard practice now and something I picked up from looking at the code produced by the guys at <a href="http://thoughtbot.com">Thought Bot</a>. While working on the test suite it became apparent many of the methods behaved in the same way for multiple user roles. I wanted to come up with a way to run a group of tests under multiple user roles without having to duplicate any code. Shoulda macros to the rescue again! After creating another macro to deal with multiple contexts I can write my tests like this&hellip;</p>

<p>``` ruby
multiple_contexts &lsquo;public_context&rsquo;, &lsquo;signed_in_user_context&rsquo; do</p>

<p>  context &ldquo;on GET to :show&rdquo; do</p>

<pre><code>setup do
  @advert = Factory(:advert)
  get :show, :id =&gt; @advert.to_param
end

should_render_with_layout :application
should_render_template :show
should_not_set_the_flash
should_assign_to( :advert ) { @advert }  
should_respond_with :success
</code></pre>

<p>  end
end
```</p>

<p>And the shoulda macro code itself&hellip;</p>

<p>``` ruby
def multiple_contexts(*contexts, &amp;blk)
  contexts.each { |context|</p>

<pre><code>send(context, &amp;blk) if respond_to?(context)
</code></pre>

<p>  }
end</p>

<p>def public_context(&amp;blk)
  context &ldquo;The public&rdquo; do</p>

<pre><code>setup { sign_out }
merge_block(&amp;blk)
</code></pre>

<p>  end
end</p>

<p>def signed_in_user_context(&amp;blk)
  context &ldquo;A signed in user&rdquo; do</p>

<pre><code>setup do
  @user = Factory(:user)
  sign_in_as @user
end
merge_block(&amp;blk)
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript_auto_include plugin has a new home]]></title>
    <link href="http://kernowsoul.com/blog/2008/09/19/javascriptautoinclude-plugin-has-a-new-home/"/>
    <updated>2008-09-19T16:05:00+01:00</updated>
    <id>http://kernowsoul.com/blog/2008/09/19/javascriptautoinclude-plugin-has-a-new-home</id>
    <content type="html"><![CDATA[<p><strong>UPDATE: This plugin is no longer maintained, I recommend using the <a href="https://rubygems.org/gems/sprockets">Sprockets gem</a>.</strong></p>

<p>After floating around without a proper home the javascript_auto_include plugin now has a nice cosy permanent home on <a href="http://github.com">Github</a>. I&rsquo;ve also added an update for Rails 2.x compatibility submitted by <a href="http://github.com/davidsch/javascript_auto_include/tree/master">davidsch</a>.</p>

<p>Grab the plugin from the <a href="https://github.com/kernow/javascript_auto_include">javascript auto include github repo</a>.</p>
]]></content>
  </entry>
  
</feed>
